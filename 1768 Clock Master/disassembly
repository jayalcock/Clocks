--- uart_17xx_40xx.c -- 59 ---------------------------------
}
else if (pUART == LPC_UART2) {
clkUART = SYSCTL_CLOCK_UART2;
}
else if (pUART == LPC_UART3) {
    9B01        ldr r3, [sp, #4]
    4A0A        ldr r2, =0x4009C000
    4293        cmp r3, r2
    D103        bne 0x100018F8
--- uart_17xx_40xx.c -- 64 ---------------------------------
clkUART = SYSCTL_CLOCK_UART3;
    2319        movs r3, #25
    F88D300F    strb.w r3, [sp, #15]
    E002        b 0x100018FE
--- uart_17xx_40xx.c -- 68 ---------------------------------
clkUART = SYSCTL_CLOCK_UART4;
}
#endif
else {
clkUART = SYSCTL_CLOCK_UART0;
    2303        movs r3, #3
    F88D300F    strb.w r3, [sp, #15]
--- uart_17xx_40xx.c -- 73 ---------------------------------
}
return clkUART;
    F89D300F    ldrb.w r3, [sp, #15]
--- uart_17xx_40xx.c -- 76 ---------------------------------
}
    4618        mov r0, r3
    B004        add sp, sp, #16
    4770        bx lr
    4000C000    .word 0x4000C000
    40010000    .word 0x40010000
    40098000    .word 0x40098000
    4009C000    .word 0x4009C000
--- uart_17xx_40xx.c -- 77 ---------------------------------
/* UART Autobaud command interrupt handler */
STATIC void Chip_UART_ABIntHandler(LPC_USART_T *pUART)
{
    B500        push {lr}
    B083        sub sp, sp, #12
    9001        str r0, [sp, #4]
--- uart_17xx_40xx.c -- 81 ---------------------------------
/* Handle End Of Autobaud interrupt */
if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABEO_INT) != 0) {
    9801        ldr r0, [sp, #4]
    F7FFFF72    bl 0x10001808 <Chip_UART_ReadIntIDReg>
    4603        mov r3, r0
    F4037380    and r3, r3, #0x0100
    2B00        cmp r3, #0
    D011        beq 0x10001952
--- uart_17xx_40xx.c -- 83 ---------------------------------
Chip_UART_SetAutoBaudReg(pUART, UART_ACR_ABEOINT_CLR);
    F44F7180    mov.w r1, #0x0100
    9801        ldr r0, [sp, #4]
    F7FFFFB1    bl 0x1000189A <Chip_UART_SetAutoBaudReg>
--- uart_17xx_40xx.c -- 84 ---------------------------------
Chip_UART_IntDisable(pUART, UART_IER_ABEOINT);
    F44F7180    mov.w r1, #0x0100
    9801        ldr r0, [sp, #4]
    F7FFFF56    bl 0x100017EE <Chip_UART_IntDisable>
--- uart_17xx_40xx.c -- 85 ---------------------------------
if (ABsyncSts == RESET) {
    4B0F        ldr r3, =0x10003F40 <ABsyncSts>
    781B        ldrb r3, [r3]
    B2DB        uxtb r3, r3
    2B00        cmp r3, #0
    D102        bne 0x10001952
--- uart_17xx_40xx.c -- 86 ---------------------------------
ABsyncSts = SET;
    4B0C        ldr r3, =0x10003F40 <ABsyncSts>
    2201        movs r2, #1
    701A        strb r2, [r3]
--- uart_17xx_40xx.c -- 87 ---------------------------------
}
}
/* Handle Autobaud Timeout interrupt */
if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABTO_INT) != 0) {
    9801        ldr r0, [sp, #4]
    F7FFFF58    bl 0x10001808 <Chip_UART_ReadIntIDReg>
    4603        mov r3, r0
    F4037300    and r3, r3, #0x0200
    2B00        cmp r3, #0
    D009        beq 0x10001976
--- uart_17xx_40xx.c -- 92 ---------------------------------
Chip_UART_SetAutoBaudReg(pUART, UART_ACR_ABTOINT_CLR);
    F44F7100    mov.w r1, #0x0200
    9801        ldr r0, [sp, #4]
    F7FFFF97    bl 0x1000189A <Chip_UART_SetAutoBaudReg>
--- uart_17xx_40xx.c -- 93 ---------------------------------
Chip_UART_IntDisable(pUART, UART_IER_ABTOINT);
    F44F7100    mov.w r1, #0x0200
    9801        ldr r0, [sp, #4]
    F7FFFF3C    bl 0x100017EE <Chip_UART_IntDisable>
--- uart_17xx_40xx.c -- 94 ---------------------------------
}
}
    BF00        nop
    B003        add sp, sp, #12
    F85DFB04    pop.w {pc}
    BF00        nop
    10003F40    .word 0x10003F40
--- uart_17xx_40xx.c -- 96 ---------------------------------
#if defined(CHIP_LPC175X_6X)
/* Returns clock ID for the peripheral block */
STATIC CHIP_SYSCTL_PCLK_T Chip_UART_GetClkIndex(LPC_USART_T *pUART)
{
    B084        sub sp, sp, #16
    9001        str r0, [sp, #4]
--- uart_17xx_40xx.c -- 101 --------------------------------
CHIP_SYSCTL_PCLK_T clkUART;
if (pUART == LPC_UART0) {
    9B01        ldr r3, [sp, #4]
    4A13        ldr r2, =0x4000C000
    4293        cmp r3, r2
    D103        bne 0x10001998
--- uart_17xx_40xx.c -- 104 --------------------------------
clkUART = SYSCTL_PCLK_UART0;
    2303        movs r3, #3
    F88D300F    strb.w r3, [sp, #15]
    E01A        b 0x100019CE
--- uart_17xx_40xx.c -- 105 --------------------------------
}
else if (pUART == LPC_UART1) {
    9B01        ldr r3, [sp, #4]
    4A10        ldr r2, =0x40010000
    4293        cmp r3, r2
    D103        bne 0x100019A8
--- uart_17xx_40xx.c -- 107 --------------------------------
clkUART = SYSCTL_PCLK_UART1;
    2304        movs r3, #4
    F88D300F    strb.w r3, [sp, #15]
    E012        b 0x100019CE
--- uart_17xx_40xx.c -- 108 --------------------------------
}
else if (pUART == LPC_UART2) {
    9B01        ldr r3, [sp, #4]
    4A0D        ldr r2, =0x40098000
    4293        cmp r3, r2
    D103        bne 0x100019B8
--- uart_17xx_40xx.c -- 110 --------------------------------
clkUART = SYSCTL_PCLK_UART2;
    2318        movs r3, #24
    F88D300F    strb.w r3, [sp, #15]
    E00A        b 0x100019CE
--- uart_17xx_40xx.c -- 111 --------------------------------
}
else if (pUART == LPC_UART3) {
    9B01        ldr r3, [sp, #4]
    4A0A        ldr r2, =0x4009C000
    4293        cmp r3, r2
    D103        bne 0x100019C8
--- uart_17xx_40xx.c -- 113 --------------------------------
clkUART = SYSCTL_PCLK_UART3;
    2319        movs r3, #25
    F88D300F    strb.w r3, [sp, #15]
    E002        b 0x100019CE
--- uart_17xx_40xx.c -- 114 --------------------------------
}
else {
clkUART = SYSCTL_PCLK_UART0;
    2303        movs r3, #3
    F88D300F    strb.w r3, [sp, #15]
--- uart_17xx_40xx.c -- 117 --------------------------------
}
return clkUART;
    F89D300F    ldrb.w r3, [sp, #15]
--- uart_17xx_40xx.c -- 120 --------------------------------
}
    4618        mov r0, r3
    B004        add sp, sp, #16
    4770        bx lr
    4000C000    .word 0x4000C000
    40010000    .word 0x40010000
    40098000    .word 0x40098000
    4009C000    .word 0x4009C000
--- uart_17xx_40xx.c -- 125 --------------------------------
****************************************************************************/
/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
    B500        push {lr}
    B085        sub sp, sp, #20
    9001        str r0, [sp, #4]
--- uart_17xx_40xx.c -- 131 --------------------------------
(void) tmp;
/* Enable UART clocking. UART base clock(s) must already be enabled */
Chip_Clock_EnablePeriphClock(Chip_UART_GetClockIndex(pUART));
    9801        ldr r0, [sp, #4]
    F7FFFF60    bl 0x100018B4 <Chip_UART_GetClockIndex>
    4603        mov r3, r0
    4618        mov r0, r3
    F7FFFC0E    bl 0x10001218 <Chip_Clock_EnablePeriphClock>
--- uart_17xx_40xx.c -- 136 --------------------------------
/* Enable FIFOs by default, reset them */
Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
    2107        movs r1, #7
    9801        ldr r0, [sp, #4]
    F7FFFF09    bl 0x10001816 <Chip_UART_SetupFIFOS>
--- uart_17xx_40xx.c -- 139 --------------------------------
/* Disable Tx */
Chip_UART_TXDisable(pUART);
    9801        ldr r0, [sp, #4]
    F000F831    bl 0x10001A6C <Chip_UART_TXDisable>
--- uart_17xx_40xx.c -- 142 --------------------------------
/* Disable interrupts */
pUART->IER = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    605A        str r2, [r3, #4]
--- uart_17xx_40xx.c -- 145 --------------------------------
/* Set LCR to default state */
pUART->LCR = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    60DA        str r2, [r3, #12]
--- uart_17xx_40xx.c -- 147 --------------------------------
/* Set ACR to default state */
pUART->ACR = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    621A        str r2, [r3, #32]
--- uart_17xx_40xx.c -- 149 --------------------------------
/* Set RS485 control to default state */
pUART->RS485CTRL = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    64DA        str r2, [r3, #0x4C]
--- uart_17xx_40xx.c -- 151 --------------------------------
/* Set RS485 delay timer to default state */
pUART->RS485DLY = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    655A        str r2, [r3, #0x54]
--- uart_17xx_40xx.c -- 153 --------------------------------
/* Set RS485 addr match to default state */
pUART->RS485ADRMATCH = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    651A        str r2, [r3, #0x50]
--- uart_17xx_40xx.c -- 155 --------------------------------
/* Clear MCR */
if (pUART == LPC_UART0) {
    9B01        ldr r3, [sp, #4]
    4A09        ldr r2, =0x4000C000
    4293        cmp r3, r2
    D105        bne 0x10001A42
--- uart_17xx_40xx.c -- 158 --------------------------------
/* Set Modem Control to default state */
pUART->MCR = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    611A        str r2, [r3, #16]
--- uart_17xx_40xx.c -- 160 --------------------------------
/*Dummy Reading to Clear Status */
tmp = pUART->MSR;
    9B01        ldr r3, [sp, #4]
    699B        ldr r3, [r3, #24]
    9303        str r3, [sp, #12]
--- uart_17xx_40xx.c -- 162 --------------------------------
}
/* Default 8N1, with DLAB disabled */
Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
    2103        movs r1, #3
    9801        ldr r0, [sp, #4]
    F7FFFEEF    bl 0x10001828 <Chip_UART_ConfigData>
--- uart_17xx_40xx.c -- 166 --------------------------------
/* Disable fractional divider */
pUART->FDR = 0x10;
    9B01        ldr r3, [sp, #4]
    2210        movs r2, #16
    629A        str r2, [r3, #0x28]
--- uart_17xx_40xx.c -- 169 --------------------------------
}
    BF00        nop
    B005        add sp, sp, #20
    F85DFB04    pop.w {pc}
    4000C000    .word 0x4000C000
--- uart_17xx_40xx.c -- 179 --------------------------------
}
/* Enable transmission on UART TxD pin */
void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    B082        sub sp, sp, #8
    9001        str r0, [sp, #4]
--- uart_17xx_40xx.c -- 186 --------------------------------
pUART->TER2 = UART_TER2_TXEN;
}
else {
#endif
pUART->TER1 = UART_TER1_TXEN;
    9B01        ldr r3, [sp, #4]
    2280        movs r2, #0x80
    631A        str r2, [r3, #0x30]
--- uart_17xx_40xx.c -- 191 --------------------------------
#if defined(CHIP_LPC177X_8X) || defined(CHIP_LPC40XX)
}
#endif
}
    BF00        nop
    B002        add sp, sp, #8
    4770        bx lr
--- uart_17xx_40xx.c -- 195 --------------------------------
/* Disable transmission on UART TxD pin */
void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    B082        sub sp, sp, #8
    9001        str r0, [sp, #4]
--- uart_17xx_40xx.c -- 201 --------------------------------
pUART->TER2 = 0;
}
else {
#endif
pUART->TER1 = 0;
    9B01        ldr r3, [sp, #4]
    2200        movs r2, #0
    631A        str r2, [r3, #0x30]
--- uart_17xx_40xx.c -- 206 --------------------------------
#if defined(CHIP_LPC177X_8X) || defined(CHIP_LPC40XX)
}
#endif
}
    BF00        nop
    B002        add sp, sp, #8
    4770        bx lr
--- uart_17xx_40xx.c -- 286 --------------------------------
}
/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
    B500        push {lr}
    B087        sub sp, sp, #28
    9001        str r0, [sp, #4]
    9100        str r1, [sp]
--- uart_17xx_40xx.c -- 291 --------------------------------
uint32_t div, divh, divl, clkin;
/* Determine UART clock in rate without FDR */
#if defined(CHIP_LPC175X_6X)
clkin = Chip_Clock_GetPeripheralClockRate(Chip_UART_GetClkIndex(pUART));
    9801        ldr r0, [sp, #4]
    F7FFFF7D    bl 0x10001984 <Chip_UART_GetClkIndex>
    4603        mov r3, r0
    4618        mov r0, r3
    F7FFFCB1    bl 0x100013F4 <Chip_Clock_GetPeripheralClockRate>
    9005        str r0, [sp, #20]
--- uart_17xx_40xx.c -- 296 --------------------------------
#else
clkin = Chip_Clock_GetPeripheralClockRate();
#endif
div = clkin / (baudrate * 16);
    9B00        ldr r3, [sp]
    011B        lsls r3, r3, #4
    9A05        ldr r2, [sp, #20]
    FBB2F3F3    udiv r3, r2, r3
    9304        str r3, [sp, #16]
--- uart_17xx_40xx.c -- 300 --------------------------------
/* High and low halves of the divider */
divh = div / 256;
    9B04        ldr r3, [sp, #16]
    0A1B        lsrs r3, r3, #8
    9303        str r3, [sp, #12]
--- uart_17xx_40xx.c -- 303 --------------------------------
divl = div - (divh * 256);
    9B03        ldr r3, [sp, #12]
    021B        lsls r3, r3, #8
    9A04        ldr r2, [sp, #16]
    1AD3        subs r3, r2, r3
    9302        str r3, [sp, #8]
--- uart_17xx_40xx.c -- 304 --------------------------------
Chip_UART_EnableDivisorAccess(pUART);
    9801        ldr r0, [sp, #4]
    F7FFFEC2    bl 0x1000183A <Chip_UART_EnableDivisorAccess>
--- uart_17xx_40xx.c -- 306 --------------------------------
Chip_UART_SetDivisorLatches(pUART, divl, divh);
    9B02        ldr r3, [sp, #8]
    B2DB        uxtb r3, r3
    9A03        ldr r2, [sp, #12]
    B2D2        uxtb r2, r2
    4619        mov r1, r3
    9801        ldr r0, [sp, #4]
    F7FFFED0    bl 0x10001866 <Chip_UART_SetDivisorLatches>
--- uart_17xx_40xx.c -- 307 --------------------------------
Chip_UART_DisableDivisorAccess(pUART);
    9801        ldr r0, [sp, #4]
    F7FFFEC2    bl 0x10001850 <Chip_UART_DisableDivisorAccess>
--- uart_17xx_40xx.c -- 308 --------------------------------
/* Fractional FDR already setup for 1 in UART init */
return clkin / div;
    9A05        ldr r2, [sp, #20]
    9B04        ldr r3, [sp, #16]
    FBB2F3F3    udiv r3, r2, r3
--- uart_17xx_40xx.c -- 312 --------------------------------
}
    4618        mov r0, r3
    B007        add sp, sp, #28
    F85DFB04    pop.w {pc}
--- uart_17xx_40xx.c -- 313 --------------------------------
/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
    B500        push {lr}
    B085        sub sp, sp, #20
    9001        str r0, [sp, #4]
    9100        str r1, [sp]
--- uart_17xx_40xx.c -- 317 --------------------------------
/* New data will be ignored if data not popped in time */
while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
    E00B        b 0x10001AFE
--- uart_17xx_40xx.c -- 319 --------------------------------
uint8_t ch = Chip_UART_ReadByte(pUART);
    9801        ldr r0, [sp, #4]